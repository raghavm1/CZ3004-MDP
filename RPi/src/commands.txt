Legend:
<<<<<<< HEAD
Sender > Receiver, "Command/Message", Instruction/Information

Android > Arduino, "U1|", Move up
Android > Arduino, "B1|", Move back
Android > Arduino, "L1|", Turn left
Android > Arduino, "W1|", Turn right
Android > Arduino, "SC|", Sensor calibration (RPi send L|A| to Arduino)
Android > Arduino, "F1|", Shortcut for some movement
Android > Arduino, "F2|", Shortcut for some movement

Android > Algo, "SE|", Start exploration (RPi send E| to Arduino)
Android > Algo, "SP|", Shortest path (RPi send F| to Arduino)
Android > Algo, "SendArena", Give MDF string
Android > Algo, "starting (x,y,s)", Determine starting point(x and y coordinates, s is a integer of direction: 0-up, 1-right, 2-down, 3-left) eg. starting (11,15,0)
Android > Algo, "waypoint (x,y)", Set waypoint (x,y) eg. waypoint (8,11)
Android > Algo, "MDF|", Android requests for MDF strings from algo

Arduino > Algo, "S1|S2|S3|S4|S5|S6", SX being the sensor value for X sensor

Algo > Arduino, "FS|", Move forward S grid where S is an integer
Algo > Arduino, "L|", Turn left
Algo > Arduino, "W|", Turn right
Algo > Arduino, "C|", Calibrate corner
Algo > Arduino, "S|", Sense all and return all 6 sensor values
Algo > Arduino, "AR|", Align right
Algo > Arduino, "AF|", Align front

Algo > Android, "M{"map":[{"explored":MDF STRING Part 1,"length":300,"obstacle":MDF String Part 2}]}", Allow android to store the two strings respectively

Algo > RPi, "C[x,y|x,y|x,y]", Command RPi to take photo and store coordinates of obstacle that image is taken from (if no obstacle, x = -1, y = -1)
Algo > RPi, "N", Exploration ended, stop image processing server and display process images

RPi > Android, "{"image":[x,y,id]}", Send android coordinates and image id of image

RPi > Android, "{"status":"exploring"}", Robot is exploring
RPi > Android, "{"status":"shortest path"}", Robot is doing fastest path
RPi > Android, "{"status":"turning left"}", Robot is turning left
RPi > Android, "{"status":"turning right"}", Robot is turning right
RPi > Android, "{"status":"idle"}", Robot is idle
RPi > Android, "{"status":"taking picture"}", Robot is taking picture
RPi > Android, "{"status":"calibrating corner"}", Robot is calibrating corner
RPi > Android, "{"status":"sense all"}", Robot is sensing all sensor values
RPi > Android, "{"status":"moving forward"}", Robot is moving forward
RPi > Android, "{"status":"align right"}", Robot is aligning right
RPi > Android, "{"status":"align front"}", Robot is aligning front

RPi > Android, "{"move":[{"direction":"forward"}]}", Robot goes forward on the android map
RPi > Android, "{"move":[{"direction":"left"}]}", Robot turns left on the android map
RPi > Android, "{"move":[{"direction":"right"}]}", Robot turns right on the android map

RPi > Arduino, "L|A|", Sensor Calibration
RPi > Arduino, "E|", Start exploration
RPi > Arduino, "F|", Start fastest path

RPi > Algo, "D", Inform algo that photo has been taken and algo can resume exploration
RPi > Algo, "I", Inform algo that all images have been taken
=======
Sender to Receiver, "Command/Message" represents Instruction/Information

Android to Arduino, "U1|", Move up
Android to Arduino, "B1|", Move back
Android to Arduino, "L1|", Turn left
Android to Arduino, "W1|", Turn right
Android to Arduino, "SC|", Sensor calibration

Android to Algorithm, "SE|", Start exploration (Rpi send E| to Arduino)
Android to Algorithm, "SP|", Shortest path (Rpi send F| to Arduino)
Android to Algorithm, "SendArena", Give MDF string
Android to Algorithm, "starting (x,y,s)", showing the starting point(x and y represent coordinates, s indicates direction: 0->up, 1->right, 2->down, 3->left) eg. starting
Android to Algorithm, "waypoint (x,y)", Set waypoint (x,y) eg. waypoint (8,11)

Arduino to Algorithm, "S1|S2|S3|S4|S5|S6", each value represents the sensor value for sensor 1-6

Algorithm to Arduino, "FS|", Move forward S grid where S is an integer
Algorithm to Arduino, "L|", Turn left
Algorithm to Arduino, "W|", Turn right
Algorithm to Arduino, "C|", Calibrate corner
Algorithm to Arduino, "S|", Sense all and return all 6 sensor values
Algorithm to Arduino, "AR|", Align right
Algorithm to Arduino, "AF|", Align front

Algorithm to Android, "M{"map":[{"explored":MDF STRING Part 1,"length":300,"obstacle":MDF String Part 2}]}", Allow android to store the two strings respectively

Algorithm to Rpi, "C[x,y|x,y|x,y]", Command Rpi to take photo and store coordinates of obstacle that image is taken from (if no obstacle, x = -1, y = -1)
Algorithm to Rpi, "N", Exploration ended, stop image processing server and display process images

Rpi to Android, "{"image":[x,y,id]}", Send android coordinates and image id of image

Rpi to Android, "{"status":"exploring"}", Robot is exploring
Rpi to Android, "{"status":"shortest path"}", Robot is doing fastest path
Rpi to Android, "{"status":"turning left"}", Robot is turning left
Rpi to Android, "{"status":"turning right"}", Robot is turning right
Rpi to Android, "{"status":"idle"}", Robot is idle
Rpi to Android, "{"status":"taking picture"}", Robot is taking picture
Rpi to Android, "{"status":"calibrating corner"}", Robot is calibrating corner
Rpi to Android, "{"status":"sense all"}", Robot is sensing all sensor values
Rpi to Android, "{"status":"moving forward"}", Robot is moving forward
Rpi to Android, "{"status":"align right"}", Robot is aligning right
Rpi to Android, "{"status":"align front"}", Robot is aligning front

Rpi to Android, "{"move":[{"direction":"forward"}]}", Robot goes forward on the android map
Rpi to Android, "{"move":[{"direction":"left"}]}", Robot turns left on the android map
Rpi to Android, "{"move":[{"direction":"right"}]}", Robot turns right on the android map

Rpi to Arduino, "SC|", Start Caliberating the sensors
Rpi to Arduino, "E|", Start the exploration task
Rpi to Arduino, "F|", Start the shortest path task

Rpi to Algorithm, "D", Tell Algorithm PC that photo has been taken and Algorithm can resume exploration
Rpi to Algorithm, "I", Tell Algorithm that all images have been taken
>>>>>>> f2afaf36a2b19dd5407c0283ddd18d146ad6b9d5
